<% # vim: ft=eruby et ts=4 sw=4 sts=4
patch = 'cb1'
supported_interpreters = [
    '8.3.24',
#   '8.2.29',
#   '8.1.0',
#   '8.0.13',
#   '7.4.26',
]
openssl_ver = '1.1.1g-sdk2'
php_versions = supported_interpreters.map do |php_ver|
    [[php_ver, true], [php_ver, false]]
end.flatten(1)

# cbdep_install = 'cbdep install --recache'
cbdep_install = 'cbdep --debug install'
%>
// DO NOT EDIT: this file was generated from Jenkinsfile.erb

pipeline {
    agent none
    stages {
        stage('prepare') {
            agent { label 'rockylinux9' }
            steps {
                cleanWs()
                sh('sudo yum remove -y libcouchbase*')
                dir('php-couchbase') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                }
                stash includes: 'php-couchbase/', name: 'php-couchbase', useDefaultExcludes: false
            }
        }
        stage('build and test') {
            parallel {
<% if ENV['LINUX_ONLY'] %>
<% ['x64'].each do |arch| %>
<%   php_versions.map(&:first).uniq.each do |php_ver| %>
<%     ['nts', 'zts'].each do |ts| %>
                stage('l<%= ts[0] %><%= php_ver.to_f %>') {
<% php_root = "/tmp/php/php-#{ts}-#{php_ver}-#{patch}" %>
<% php = "#{php_root}/bin/php" %>
<% php_config = "#{php_root}/bin/php-config" %>
                    agent { label 'rockylinux9' }
                    stages {
                        stage('php') {
                            steps {
                                sh(script: 'sudo yum install -y openssl-libs openssl11-libs', returnStatus: true)
                                cleanWs()
                                sh('<%= cbdep_install %> --dir /tmp/php php-<%= ts %> <%= php_ver %>-<%= patch %>')
                            }
                        }
<% lcb_root = "install/libcouchbase-linux-amd64" %>
<% lcb_ver = '3.2.4-cb1' %>
                        stage('lcb') {
                            steps {
                                dir('<%= php_ver %>-<%= ts %>-<%= arch %>') {
<% lcb3_root = "install/libcouchbase-#{lcb_ver}/libcouchbase-rockylinux9-x86_64-#{lcb_ver}" %>
                                    sh('<%= cbdep_install %> --base-url http://sdk-snapshots.couchbase.com/cbdeps libcouchbase <%= lcb_ver %>')
                                    sh('mv <%= lcb3_root %> <%= lcb_root %>')
                                    sh('rm -rf <%= lcb_root %>/lib; ln -sf \$(realpath <%= lcb_root %>/lib64) <%= lcb_root %>/lib')
                                    sh('LD_LIBRARY_PATH=\$(realpath <%= lcb_root %>/lib) <%= lcb_root %>/bin/cbc version')
                                }
                            }
                        }
                        stage('build') {
                            steps {
                                dir('<%= php_ver %>-<%= ts %>-<%= arch %>') {
                                    unstash 'php-couchbase'
                                    dir('php-couchbase') {
                                        sh('<%= php_root %>/bin/phpize')
                                        sh("./configure --with-couchbase=\$(realpath ../<%= lcb_root %>) --with-php-config=<%= php_config %>")
                                        sh('make clean all')
                                    }
                                }
                            }
                        }
                        stage('test') {
                            options {
                                timeout(time: 15, unit: 'MINUTES')
                            }
                            steps {
                                dir('<%= php_ver %>-<%= ts %>-<%= arch %>/php-couchbase') {
                                    sh('sudo yum install --disablerepo=bintray* -y libnsl oniguruma')
                                    sh("CB_MOCK=1 <%= php %>  -d extension=\$(pwd)/modules/couchbase.so  -d couchbase.log_level=TRACE <%= php_root %>/phpunit.phar --debug tests/")
                                }
                            }
                        }
                    }
                }
<%     end %>
<%   end %>
<% end %>
<% end %>
<% if ENV['WINDOWS_ONLY'] %>
<%
def msvc_ver(php)
    case php
    when /8.0/, /8.1/, /8.2/, /8.3/
        'msvc2019'
    when /7.4/, /7.3/
        'msvc2017'
    end
end

def msvs_ver(php)
    case php
    when /8.0/, /8.1/, /8.2/, /8.3/
        '16.0'
    when /7.4/, /7.3/
        '15.0'
    end
end

def cbdep_platform(php)
    case php
    when /8.0/, /8.1/, /8.2/, /8.3/
        'windows_msvc2019'
    when /7.4/, /7.3/
        'windows_msvc2017'
    end
end

def agent_label(php)
    case php
    when /8.0/, /8.1/, /8.2/, /8.3/
        'msvc-2019'
    when /7.4/, /7.3/
        'msvc-2017'
    end
end

%>
<% ['x64'].each do |arch| %>
<%   php_versions.each do |(php_ver, has_ssl)| %>
<%     ['zts', 'nts'].each do |ts| %>
                stage('w<%= ts[0] %><%= php_ver.to_f %><%= 's' if has_ssl %>') {
<% php_root = "c:\\\\php\\\\php-#{ts}-default-#{php_ver}-#{patch}" %>
<% php = "#{php_root}\\\\php" %>
<% phpize = "#{php_root}\\\\SDK\\\\phpize.bat" %>
<% work_dir = "#{php_ver}-#{ts}-#{arch}#{'-ssl' if has_ssl}" %>
                    agent { label '<%= agent_label(php_ver) %>' }
                    stages {
                        stage('deps') {
                            steps {
                                dir('<%= work_dir %>') {
                                    deleteDir()
<% if has_ssl %>
                                    bat('cbdep --debug --platform windows_msvc2017 install openssl <%= openssl_ver %>')
<% end %>
                                    bat('<%= cbdep_install %> --dir c:\\php php-<%=ts %>-default <%= php_ver %>-<%= patch %>')

<% lcb_root = "install\\\\libcouchbase-windows_#{msvc_ver(php_ver)}-amd64" %>
<% lcb_ver = "3.2.4-cb1#{'.openssl' if has_ssl}" %>
<% lcb3_root = "install\\\\libcouchbase-#{lcb_ver}\\\\libcouchbase-windows_#{msvc_ver(php_ver)}-amd64-#{lcb_ver}" %>
                                    bat('cbdep --debug --platform <%= cbdep_platform(php_ver) %> install --base-url http://sdk-snapshots.couchbase.com/cbdeps libcouchbase <%= lcb_ver %>')
                                    bat('move <%= lcb3_root %> <%= lcb_root %>')
<% if has_ssl %>
                                    bat('copy install\\openssl-<%= openssl_ver %>\\bin\\*.dll <%= lcb_root %>\\bin\\')
<% end %>
                                }
                            }
                        }
                        stage('build') {
                            steps {
                                dir('<%= work_dir %>') {
                                    unstash 'php-couchbase'
                                    dir('php-couchbase') {
<%
vc_vars = "%PROGRAMFILES(X86)%\\\\Microsoft Visual Studio\\\\#{msvc_ver(php_ver)[/\d+/]}\\\\Professional\\\\VC\\\\Auxiliary\\\\Build\\\\vcvarsall.bat"
%>
                                        bat("""
 set PATH=<%= php_root %>\\msys2\\usr\\bin;%PATH%
 call "<%= vc_vars %>" x86_amd64
 @echo on
 call <%= phpize %>
 call configure.bat --with-couchbase=..\\<%= lcb_root %> --with-prefix=release
 call nmake
 call nmake install
""")
                                    }
                                }
                            }
                        }
                        stage('test') {
<% mock_ver = '1.5.25' %>
<% mock_jar = 'tests\\\\CouchbaseMock.jar' %>
<% mock_port = 1000 * (ts == 'zts' ? 1 : 2) + php_ver.scan(/\d/).join.to_i %>
                            environment {
                                CB_MOCK = 1
                                CB_MOCK_CTL_PORT = <%= mock_port %>
                            }
                            options {
                                timeout(time: 15, unit: 'MINUTES')
                            }
                            steps {
                                dir('<%= work_dir %>\\php-couchbase') {
<% if has_ssl %>
                                    bat('copy ..\\install\\openssl-<%= openssl_ver %>\\bin\\*.dll .')
<% end %>
                                    bat('copy ..\\<%= lcb_root %>\\bin\\libcouchbase.dll libcouchbase.dll')
                                    bat("<%= php %> -d extension=%cd%\\release\\ext\\php_couchbase.dll -i")
                                    bat('<%= php_root %>\\msys2\\usr\\bin\\wget.exe -O <%= mock_jar %> http://packages.couchbase.com/clients/c/mock/CouchbaseMock-<%= mock_ver %>.jar')
                                    bat("""
 start /b cmd /c java -jar <%= mock_jar %> --cccp --harakiri-monitor 127.0.0.1:<%= mock_port %>
 <%= php %> -d extension=php_phar.dll -d extension=%cd%\\release\\ext\\php_couchbase.dll -d couchbase.log_level=TRACE <%= php_root %>\\php-phpunit.phar --debug %cd%\\tests\\
<% release_dir = "php_couchbase-#{php_ver}-#{ts}-#{arch}#{'-openssl' if has_ssl}" %>
 mkdir <%= release_dir %>
 copy libcouchbase.dll <%= release_dir %>
 copy release\\ext\\php_couchbase.dll <%= release_dir %>
""")
                                    stash includes: '<%= release_dir %>/', name: '<%= release_dir %>', useDefaultExcludes: false

                                }
                            }
                        }
                    }
                }
<%     end %>
<%   end %>
<% end %>
<% end %>

            }
        }
<% if ENV['WINDOWS_ONLY'] %>
<% php_ver = php_versions.map(&:first).find {|v| v =~ /8.3/} %>
<% ts = 'zts' %>
        stage('package') {
            stages {
                stage('src') {
                    agent { label 'rockylinux9' }
                    steps {
                        cleanWs()
                        sh('<%= cbdep_install %> --dir /tmp/php php-<%= ts %> <%= php_ver %>-<%= patch %>')
<% php_root = "/tmp/php/php-#{ts}-#{php_ver}-#{patch}" %>
<% php = "#{php_root}/bin/php" %>
<% pear = "#{php_root}/bin/pear" %>
                        unstash 'php-couchbase'
                        dir('php-couchbase') {
                            sh('sed -i   "s:^    <date>.*</date>:<date>\$(date +%Y-%m-%d)</date>:" package.xml')
                            sh('<%= pear %> package')
                            archiveArtifacts(artifacts: "couchbase-*.tgz", fingerprint: true)
                            stash(includes: 'couchbase-*tgz', name: 'tarball', useDefaultExcludes: false)
                            sh('tar xf couchbase-*.tgz')
                        }
                    }
                }
                stage('bin') {
                    when {
                        expression {
                            return IS_GERRIT_TRIGGER.toBoolean() == false
                        }
                    }
                    parallel {
<% ['x64'].each do |arch| %>
<%   php_versions.each do |(php_ver, has_ssl)| %>
<%     ['zts', 'nts'].each do |ts| %>
<% release_dir = "php_couchbase-#{php_ver}-#{ts}-#{arch}#{'-openssl' if has_ssl}" %>
                        stage('w<%= ts[0] %><%= php_ver.to_f %><%= 's' if has_ssl %>') {
                            agent { label 'rockylinux9' }
                            steps {
                                cleanWs()
                                unstash 'tarball'
                                unstash '<%= release_dir %>'
                                sh('sudo yum install --disablerepo=bintray* -y perl-XML-XPath')
                                sh("""
tar xf couchbase-*tgz
cp package.xml couchbase-*/LICENSE <%= release_dir %>/
version=\$(xpath -e '//package/version/release/text()' package.xml)
pkg_name="php_couchbase-\${version}-<%= php_ver.to_f %>-<%= ts %>-x64<%= '-openssl' if has_ssl %>"
mv <%= release_dir %> \${pkg_name}
zip -r9 \${pkg_name}.zip \${pkg_name}
                                """)
                                archiveArtifacts(artifacts: "*.zip", fingerprint: true)
                            }
                        }
<%     end %>
<%   end %>
<% end %>
                    }
                }
            }
        }
<% end %>
    }
}
