<% # vim: ft=eruby et ts=4 sw=4 sts=4
openssl_ver = '1.1.1d-cb1'
windows_dists = [
    [2015, 14, 64, false],
    # [2015, 14, 32, false],
    [2017, 15, 64, true],
    # [2017, 15, 32, false],
]
centos_dists = [
    [7, 'x86_64', 64],
]

ubuntu_dists = [
    ['bionic', 'amd64', 'ubuntu1804', 64],
    # ['bionic', 'i386', 'ubuntu1804', 32],
    ['buster', 'amd64', 'debian10', 64],
    # ['buster', 'i386', 'debian10', 32],
]

server_versions = [
    '5.5.6',
    '6.0.3',
    '6.5.0',
    '6.5.0_DP',
    '7.0.0-2147'
]

linux_test_builds = [
    ['debian9', 'debian', 9],
    ['centos7', 'centos', 7]
]

integration_enabled = true
if ENV['WINDOWS_ONLY']
    windows_dists = [
        [2015, 14, 64, false],
        [2015, 14, 32, false],
        [2017, 15, 64, true],
        [2017, 15, 64, false],
        [2017, 15, 32, false],
        #[2019, 16, 64, false],
    ]
    centos_dists = ubuntu_dists = linux_test_builds = []
    integration_enabled = false
elsif ENV['LINUX_ONLY']
    windows_dists = []
    centos_dists = [
        [7, 'x86_64', 64],
        [8, 'x86_64', 64],
    ]
    ubuntu_dists = [
        ['bionic', 'amd64', 'ubuntu1804', 64],
        # ['bionic', 'i386', 'ubuntu1804', 32],
        ['xenial', 'amd64', 'ubuntu1604', 64],
        # ['xenial', 'i386', 'ubuntu1604', 32],

        ['stretch', 'amd64', 'debian9', 64],
        # ['stretch', 'i386', 'debian9', 32],
        ['buster', 'amd64', 'debian10', 64],
        # ['buster', 'i386', 'debian10', 32],
    ]
end

reltype = 'DEBUG'
reltype = 'RelWithDebInfo'

%>
// DO NOT EDIT: this file was generated from Jenkinsfile.erb
class Version {
    String gitVersion;

    int major;
    int minor;
    int patch;
    int commitCount;
    String prerelease;
    String commitSha1;

    Version(String gitVersion) {
        this.gitVersion = gitVersion.trim();
        parse()
    }

    @NonCPS
    void parse() {
        def res = (gitVersion =~ /^(\d+)\.(\d+)\.(\d+)(-(beta.\d+))?(-(\d+)-g([0-9a-f]+))?$/)
        res.find()
        this.major = res.group(1) as Integer
        this.minor = res.group(2) as Integer
        this.patch = res.group(3) as Integer
        if (res.group(5)) {
            this.prerelease = res.group(5)
        }
        if (res.group(7)) {
            this.commitCount = res.group(7) as Integer
        }
        if (res.group(8)) {
            this.commitSha1 = res.group(8)
        }
    }

    String version() {
        return "${major}.${minor}.${patch}"
    }

    String tar() {
        if (commitCount == null || commitCount == 0) {
            if (prerelease != null && prerelease != "") {
                return "${version()}_${prerelease}"
            } else {
                return version()
            }
        }
        return gitVersion.replace("-", "_")
    }

    String tarName() {
        return "libcouchbase-${tar()}"
    }

    String rpmVer() {
        return version()
    }

    String rpmRel() {
        def rel = "1"
        if (prerelease) {
            rel = "0.${prerelease}"
        } else if (commitCount) {
            rel = "${commitCount + 1}.git${commitSha1}"
        }
        return rel
    }

    String srpmGlob() {
        return "libcouchbase-${version()}-${rpmRel()}*.src.rpm"
    }

    String[] rpm() {
        return [version(), rpmRel()]
    }

    String deb() {
        def ver = version()
        if (prerelease) {
            ver += "~${prerelease}"
        } else if (commitCount) {
            ver += "~r${commitCount}git${commitSha1}"
        }
        return ver
    }
}

def VERSION = new Version('0.0.0')

class DynamicCluster {
    String id = null;
    String connstr = null;
    String server_version = null;

    boolean isAllocated() {
        return !(id == null || id == "")
    }

    String inspect() {
        return "Cluster(id: ${id}, connstr: ${connstr})"
    }
}

def CLUSTER = [:]

def doIntegrationStages(CLUSTER) {
    def returned_stages = [:]
<% server_versions.each do |server_version| %>
    returned_stages['<%= server_version %>'] = {
        node('sdkqe-centos7') {
            try {
                stage('start') {
                    sh("cbdyncluster ps -a")
                    script {
                       def cluster = new DynamicCluster()
                        CLUSTER['<%= server_version %>'] = cluster
                        def ver = '<%= server_version %>'.tokenize("_")[0]
                        cluster.id = sh(script: "cbdyncluster allocate --num-nodes=3 --server-version=${ver}", returnStdout: true).trim()
                        cluster.connstr = sh(script: "cbdyncluster ips ${cluster.id}", returnStdout: true).trim()
                    }
                    echo "Allocated ${CLUSTER['<%= server_version %>'].inspect()}"
                    sh("cbdyncluster setup ${CLUSTER['<%= server_version %>'].id} --node=kv,index,n1ql,fts --node=kv --node=kv --bucket=default")
                    script {
                        def isDp = '<%= server_version %>'.tokenize("_").size() > 1
                        def ip = "${CLUSTER['<%= server_version %>'].connstr}".tokenize(",")[0]
                        echo "isDp=${isDp}"
                        sh("""curl -vv -X POST -u Administrator:password http://${ip}:8091/sampleBuckets/install -d '["beer-sample"]'""")
                        sleep(30)
                        if (isDp) {
                           sh("curl -vv -X POST -u Administrator:password http://${ip}:8091/settings/developerPreview -d 'enabled=true'")
                        }
                        stage('test') {
                            try {
                                environment {
                                    LCB_TEST_CLUSTER_CONF="${CLUSTER['<%= server_version %>'].connstr.replaceAll(',', ';')},default,Administrator,password"
                                }
                                unstash('centos7_build')
                                dir('ws_centos7_x64/build') {
                                    sh("pwd")
                                    sh("sed -i s:/home/couchbase/jenkins/workspace/lcb/lcb-scripted-build-pipeline/ws_centos7_x64/build:\$(realpath .):g tests/CTestTestfile.cmake")
                                    sleep(20)
                                    sh("ctest -E BUILD ${VERBOSE.toBoolean() ? '-VV' : ''}")
                                }
                            } catch(all) {
                                sh('tar cf integration_failure-ws_centos7_<%= server_version %>_x64.tar ws_centos7_x64')
                                archiveArtifacts(artifacts: "integration_failure-ws_centos7_<%= server_version %>_x64.tar")
                            }
                        }
                    }
                }
            } finally {
                script {
                    if (CLUSTER['<%= server_version %>'] && CLUSTER['<%= server_version %>'].isAllocated()) {
                        sh("cbdyncluster rm ${CLUSTER['<%= server_version %>'].id}")
                    }
                }
            }
        }
    }
<% end %>
    return returned_stages
}

pipeline {
    agent none
    stages {
        stage('prepare and validate') {
            agent { label 'centos8 || centos7 || centos6' }
            steps {
                cleanWs()
                script {
                    if (IS_GERRIT_TRIGGER.toBoolean()) {
                        currentBuild.displayName = "cv-${BUILD_NUMBER}"
                    } else {
                        currentBuild.displayName = "full-${BUILD_NUMBER}"
                    }
                }

                dir('libcouchbase') {
                    checkout([$class: 'GitSCM', branches: [[name: '$SHA']], userRemoteConfigs: [[refspec: "$GERRIT_REFSPEC", url: '$REPO', poll: false]]])
                    script {
                        VERSION = new Version(sh(script: 'git describe --long --abbrev=10', returnStdout: true))
                        echo "Building ${VERSION.gitVersion}, gerrit: ${IS_GERRIT_TRIGGER}, release: ${IS_RELEASE}"
                    }
                }

                stash includes: 'libcouchbase/', name: 'libcouchbase', useDefaultExcludes: false

                dir('libcouchbase') {
                    dir('build') {
                        sh('cmake -DCMAKE_BUILD_TYPE=<%= reltype %> -DLCB_NO_PLUGINS=1 -DLCB_NO_TESTS=1 -DLCB_NO_MOCK=1 ..')
                        sh('make dist')
                        archiveArtifacts(artifacts: "${VERSION.tarName()}.tar.gz", fingerprint: true)
                        stash includes: "${VERSION.tarName()}.tar.gz", name: 'tarball', useDefaultExcludes: false
<% if ENV['WINDOWS_ONLY'] %>
                        withAWS(credentials: 'aws-sdk', region: 'us-east-1') {
                            s3Upload(
                                bucket: 'sdk-snapshots.couchbase.com',
                                file: "${VERSION.tarName()}.tar.gz",
                                path: 'libcouchbase/'
                            )
                        }
<% end %>
                    }
                }
            }
        }

        stage('build and test') {
            parallel {

<% linux_test_builds.each do |(label, dist, relno)| %>
                stage('<%= label %> mock') {
                    agent { label '<%= label %>' }
                    stages {
                        stage('<%= dist[0..2] %><%= relno %>') {
                            steps {
                                dir('ws_<%= label %>_x64') {
                                    deleteDir()
                                    unstash 'libcouchbase'
                                }
                            }
                        }
                        stage('build') {
                            post {
                                failure {
                                    sh('tar cf failure-ws_<%= label %>_x64.tar ws_<%= label %>_x64')
                                    archiveArtifacts(artifacts: "failure-ws_<%= label %>_x64.tar", fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_<%= label %>_x64') {
                                    dir('build') {
                                        sh('cmake -DCMAKE_BUILD_TYPE=<%= reltype %> ../libcouchbase')
                                        sh("make -j8 ${VERBOSE.toBoolean() ? 'VERBOSE=1' : ''}")
                                        sh("make -j8 ${VERBOSE.toBoolean() ? 'VERBOSE=1' : ''} alltests")
                                    }
                                }
                                stash includes: 'ws_<%= label %>_x64/', name: '<%= label %>_build'
                            }
                        }
                        stage('test') {
                            post {
                                failure {
                                    sh('tar cf failure-ws_<%= label %>_x64.tar ws_<%= label %>_x64')
                                    archiveArtifacts(artifacts: "failure-ws_<%= label %>_x64.tar", fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_<%= label %>_x64/build') {
                                    sh("ctest ${VERBOSE.toBoolean() ? '-VV' : ''}")
                                }
                            }
                        }
                    }
                }
<% end %>
<% windows_dists.each do |(msvs_ver, msvcc_ver, arch, has_ssl)| %>
<% build_id = "#{arch}_vc#{msvcc_ver}#{'_ssl' if has_ssl}" %>
                stage('w<%= arch %>v<%= msvcc_ver %><%= 's' if has_ssl %>') {
                    agent { label 'msvc-<%= msvs_ver %>' }
                    stages {
                        stage('prep') {
                            steps {
                                dir('ws_win<%= build_id %>') {
                                    deleteDir()
<% if has_ssl %>
                                    bat('cbdep --platform windows_msvc2017 install openssl <%= openssl_ver %>')
<% end %>
                                    unstash 'libcouchbase'
                                }
                            }
                        }
                        stage('build') {
                            post {
                                failure {
                                    zip(zipFile: 'failure-ws_win<%= build_id %>.zip', archive: false, dir: 'ws_win<%= build_id %>')
                                    archiveArtifacts(artifacts: 'failure-ws_win<%= arch %>_vc<%= msvcc_ver %>.zip', fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_win<%= build_id %>/build') {
                                    bat('cmake --version --help')
                                    bat('cmake -G"Visual Studio <%= msvcc_ver %> <%= msvs_ver %><%= ' Win64' if arch == 64 && msvs_ver != 2019 %>" <%= has_ssl ? "-DOPENSSL_ROOT_DIR=..\\\\install\\\\openssl-#{openssl_ver}": "-DLCB_NO_SSL=1" %> ..\\libcouchbase')
                                    bat('cmake --build .')
                                }
                            }
                        }
                        stage('test') {
                            post {
                                failure {
                                    zip(zipFile: 'failure-ws_win<%= build_id %>.zip', archive: false, dir: 'ws_win<%= build_id %>')
                                    archiveArtifacts(artifacts: 'failure-ws_win<%= build_id %>.zip', fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_win<%= build_id %>/build') {
                                    bat('cmake --build . --target alltests')
<% if has_ssl %>
                                    bat('copy ..\\install\\openssl-<%= openssl_ver %>\\bin\\*.dll bin\\Debug\\')
<% end %>
                                    bat("ctest --parallel=2 -C debug ${VERBOSE.toBoolean() ? '-VV' : ''}")
                                }
                            }
                        }
                        stage("pack") {
                            post {
                                failure {
                                    zip(zipFile: 'failure-ws_win<%= build_id %>.zip', archive: false, dir: 'ws_win<%= build_id %>')
                                    archiveArtifacts(artifacts: 'failure-ws_win<%= build_id %>.zip', fingerprint: false)
                                }
                            }
                            when {
                                expression {
                                    return IS_GERRIT_TRIGGER.toBoolean() == false
                                }
                            }
                            steps {
                                dir('ws_win<%= build_id %>/build') {
                                    bat('cmake --build . --target package')
<% if has_ssl %>
                                    bat("move ${VERSION.tarName()}_vc<%= msvcc_ver %>_amd64.zip ${VERSION.tarName()}_vc<%= msvcc_ver %>_amd64_openssl.zip")
<% end %>
                                    archiveArtifacts(artifacts: "${VERSION.tarName()}_vc<%= msvcc_ver %>_<%= arch == 64 ? 'amd64' : 'x86' %><%= '_openssl' if has_ssl %>.zip", fingerprint: true)
<% if ENV['WINDOWS_ONLY'] %>
                                    withAWS(credentials: 'aws-sdk', region: 'us-east-1') {
                                        s3Upload(
                                            bucket: 'sdk-snapshots.couchbase.com',
                                            file: "${VERSION.tarName()}_vc<%= msvcc_ver %>_<%= arch == 64 ? 'amd64' : 'x86' %><%= '_openssl' if has_ssl %>.zip",
                                            path: 'libcouchbase/'
                                        )
                                    }
<% end %>
                                }
                            }
                        }
                    }
                }
<% end %>
            }
        }
<% if integration_enabled %>
        stage('integration test') {
            when {
                expression {
                    return IS_GERRIT_TRIGGER.toBoolean() == false
                }
            }
            steps {
                script {
                    parallel doIntegrationStages(CLUSTER)
                }
            }
        }
<% end %>
<% if (centos_dists + ubuntu_dists).any? %>
        stage('package') {
            when {
                expression {
                    return IS_GERRIT_TRIGGER.toBoolean() == false
                }
            }
            parallel {
<% centos_dists.each do |(relno, arch, bits)| %>
                stage('pkg centos<%= relno %> <%= arch %>') {
                    agent { label 'mock' }
                    stages {
                        stage('c<%= bits %>v<%= relno %>') {
                            steps {
                                dir('ws_centos<%= bits %>_v<%= relno %>') {
                                    sh("sudo chown couchbase:couchbase -R .")
                                    deleteDir()
                                    unstash 'libcouchbase'
                                }
                            }
                        }
                        stage('srpm') {
                            post {
                                failure {
                                    sh("tar cf failure-ws_centos<%= bits %>_v<%= relno %>.tar ws_centos<%= bits %>_v<%= relno %>")
                                    archiveArtifacts(artifacts: "failure-ws_centos<%= bits %>_v<%= relno %>.tar", fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_centos<%= bits %>_v<%= relno %>/build') {
                                    unstash 'tarball'
                                    sh("""
                                        sed 's/@VERSION@/${VERSION.rpmVer()}/g;s/@RELEASE@/${VERSION.rpmRel()}/g;s/@TARREDAS@/${VERSION.tarName()}/g' \
                                        < ../libcouchbase/packaging/rpm/libcouchbase.spec.in > libcouchbase.spec
                                    """.stripIndent())
                                    sh("""
                                        sudo mock --buildsrpm -r epel-<%= relno %>-<%= arch %> --spec libcouchbase.spec --sources ${pwd()} --old-chroot \
                                        --resultdir="libcouchbase-${VERSION.tar()}_centos<%= relno %>_srpm"
                                    """.stripIndent())
                                }
                            }
                        }
                        stage('rpm') {
                            post {
                                failure {
                                    sh("tar cf failure-ws_centos<%= bits %>_v<%= relno %>.tar ws_centos<%= bits %>_v<%= relno %>")
                                    archiveArtifacts(artifacts: "failure-ws_centos<%= bits %>_v<%= relno %>.tar", fingerprint: false)
                                }
                            }
                            steps {
                                dir('ws_centos<%= bits %>_v<%= relno %>/build') {
                                    sh("""
                                        sudo mock --rebuild -r epel-<%= relno %>-<%= arch %> --resultdir="libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>" --old-chroot \
                                        libcouchbase-${VERSION.tar()}_centos<%= relno %>_srpm/libcouchbase-${VERSION.version()}-${VERSION.rpmRel()}.el<%= relno %>.src.rpm
                                    """.stripIndent())
                                    sh("sudo chown couchbase:couchbase -R libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>")
                                    sh("rm -rf libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>/*.log")
                                    sh("tar cf libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>.tar libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>")
                                    archiveArtifacts(artifacts: "libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>.tar", fingerprint: true)
<% if relno == 8 && arch == 'x86_64' %>
                                    stash(includes: "libcouchbase-${VERSION.tar()}_centos<%= relno %>_<%= arch %>/*.src.rpm", name: 'centos8-srpm')
<% end %>
                                }
                            }
                        }
                    }
                }
<% end %>
<% ubuntu_dists.each do |(codename, arch, name, bits)| %>
                    stage('pkg <%= name %> <%= arch %>') {
                        agent { label 'cowbuilder' }
                        stages {
                            stage('<%= name[0] %><%= bits %>v<%= name[/(\d{1,2})/, 1] %>') {
                                steps {
                                    dir('ws_<%= name %>_<%= arch %>') {
                                        sh("sudo chown couchbase:couchbase -R .")
                                        deleteDir()
                                        unstash 'libcouchbase'
                                    }
                                }
                            }
                            stage('cow1') {
                                when {
                                    expression {
                                        !fileExists("/var/cache/pbuilder/<%= codename %>-<%= arch %>.cow/etc/os-release")
                                    }
                                }
                                steps {
                                    sh("""
                                        sudo cowbuilder --create \
                                        --basepath /var/cache/pbuilder/<%= codename %>-<%= arch %>.cow \
                                        --distribution <%= codename %> \
                                        --debootstrapopts --arch=<%= arch %> \
                                        <% if name =~ /ubuntu/ %>--components 'main universe' --mirror http://ftp.ubuntu.com/ubuntu --debootstrapopts --keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg<% else %> --components 'main'<% end %>
                                    """.stripIndent())
                                }
                            }
                            stage('cow2') {
                                when {
                                    expression {
                                        fileExists("/var/cache/pbuilder/<%= codename %>-<%= arch %>.cow/etc/os-release")
                                    }
                                }
                                steps {
                                    sh('sudo cowbuilder --update --basepath /var/cache/pbuilder/<%= codename %>-<%= arch %>.cow')
                                }
                            }
                            stage('src') {
                                post {
                                    failure {
                                        sh("tar cf failure-ws_<%= name %>_<%= arch %>.tar ws_<%= name %>_<%= arch %>")
                                        archiveArtifacts(artifacts: "failure-ws_<%= name %>_<%= arch %>.tar", fingerprint: false)
                                    }
                                }
                                steps {
                                    dir('ws_<%= name %>_<%= arch %>/build') {
                                        unstash 'tarball'
                                        sh("ln -s ${VERSION.tarName()}.tar.gz libcouchbase_${VERSION.deb()}.orig.tar.gz")
                                        sh("tar -xf ${VERSION.tarName()}.tar.gz")
                                        sh("cp -a ../libcouchbase/packaging/deb ${VERSION.tarName()}/debian")
                                        dir(VERSION.tarName()) {
                                            sh("""
                                                dch --no-auto-nmu --package libcouchbase --newversion ${VERSION.deb()}-1 \
                                                --create "Release package for libcouchbase ${VERSION.deb()}-1"
                                            """.stripIndent())
                                            sh("dpkg-buildpackage -rfakeroot -d -S -sa")
                                        }
                                    }
                                }
                            }
                            stage('deb') {
                                post {
                                    failure {
                                        sh("tar cf failure-ws_<%= name %>_<%= arch %>.tar ws_<%= name %>_<%= arch %>")
                                        archiveArtifacts(artifacts: "failure-ws_<%= name %>_<%= arch %>.tar", fingerprint: false)
                                    }
                                }
                                steps {
                                    dir('ws_<%= name %>_<%= arch %>/build') {
                                        sh("""
                                           sudo cowbuilder --build \
                                           --basepath /var/cache/pbuilder/<%= codename %>-<%= arch %>.cow \
                                           --buildresult libcouchbase-${VERSION.deb()}_<%= name %>_<%= codename %>_<%= arch %> \
                                           --debbuildopts -j8 \
                                           --debbuildopts "-us -uc" \
                                           libcouchbase_${VERSION.deb()}-1.dsc
                                        """.stripIndent())
                                        sh("sudo chown couchbase:couchbase -R libcouchbase-${VERSION.deb()}_<%= name %>_<%= codename %>_<%= arch %>")
                                        sh("tar cf libcouchbase-${VERSION.tar()}_<%= name %>_<%= codename %>_<%= arch %>.tar libcouchbase-${VERSION.deb()}_<%= name %>_<%= codename %>_<%= arch %>")
                                        archiveArtifacts(artifacts: "libcouchbase-${VERSION.tar()}_<%= name %>_<%= codename %>_<%= arch %>.tar", fingerprint: true)
                                    }
                                }
                            }
                        }
                    }
<% end %>
            }
        }
<% if centos_dists.any? {|(relno, arch, bits)| relno == 8 && arch = 'x86_64' } %>
        stage('amzn2') {
            agent { label 'amzn2' }
            steps {
                sh('sudo yum install -y rpm-build yum-utils')
                cleanWs()
                unstash('centos8-srpm')
                sh('sudo yum-builddep -y libcouchbase-*/*.src.rpm')
                sh('rpmbuild --rebuild libcouchbase-*/*.src.rpm -D "_rpmdir output"')
                dir('output') {
                    sh("mv x86_64 libcouchbase-${VERSION.tar()}_amzn2_x86_64")
                    sh("tar cf libcouchbase-${VERSION.tar()}_amzn2_x86_64.tar libcouchbase-${VERSION.tar()}_amzn2_x86_64")
                    archiveArtifacts(artifacts: "libcouchbase-${VERSION.tar()}_amzn2_x86_64.tar", fingerprint: true)
                }
            }
        }
<% end %>
<% if ENV['LINUX_ONLY'] %>
        stage('repositories') {
            when {
                expression {
                    return IS_GERRIT_TRIGGER.toBoolean() == false
                }
            }
            agent none
            steps {
                build(job: 'lcb-repo-pipeline')
            }
        }
<% end %>
<% end %>
    }
}
